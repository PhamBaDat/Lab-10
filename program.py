import pyttsx3
import speech_recognition as sr
import json
import random
import requests
import re

END = "\x1b[0m"
CLEAR = "[033[H"

RED = "\033[91m"
WHITE = "\033[97m"
BLACK = "\033[90m"
GREEN = "\033[92m"
YELLOW = "\033[93m"
BLUE = "\033[94m"

def Weather_Report():
    url_weather = f'https://wttr.in/Saint-Petersburg?format=2'
    data = []

    response = requests.get(url_weather)
    weather_data = response.text

    wind_direction_mapping = {
        "‚Üñ": "–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥",  # T√¢y B·∫Øc
        "‚Üó": "–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫",  # ƒê√¥ng B·∫Øc
        "‚Üë": "–°–µ–≤–µ—Ä",           # B·∫Øc
        "‚Üì": "–Æ–≥",              # Nam
        "‚Üò": "–Æ–≥–æ-–≤–æ—Å—Ç–æ–∫",       # ƒê√¥ng Nam
        "‚Üô": "–Æ–≥–æ-–∑–∞–ø–∞–¥",       # T√¢y Nam
        "‚Üê": "–ó–∞–ø–∞–¥",           # T√¢y
        "‚Üí": "–í–æ—Å—Ç–æ–∫",          # ƒê√¥ng
    }
    
    match = re.match(r"([üå¶‚õÖÔ∏è‚òÄÔ∏è‚òÅÔ∏èüå§Ô∏è‚õÖÔ∏èüå•Ô∏èüå¶Ô∏èüåßÔ∏èüå®Ô∏èüå©Ô∏èüå™Ô∏èüå´Ô∏èüå¨Ô∏èüåà‚ùÑÔ∏èüå®Ô∏èüå©Ô∏è‚õàÔ∏è]+)\s+üå°Ô∏è([+-]?\d+¬∞C)\s+üå¨Ô∏è([‚Üñ‚Üó‚Üë‚Üì‚Üò‚Üô‚Üê‚Üí‚Üò‚Üñ]+)(\d+km/h)", weather_data)

    if response.status_code == 200:
        if match:
            for i in range(1, 5):
                data.append(match.group(i))

            # Thay th·∫ø m≈©i t√™n trong h∆∞·ªõng gi√≥ b·∫±ng h∆∞·ªõng theo ƒê√¥ng, T√¢y, Nam, B·∫Øc
            wind_direction = data[2]
            if wind_direction in wind_direction_mapping:
                data[2] = wind_direction_mapping[wind_direction]
        else:
            print("–ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return [] 
        
        print(f'{BLUE}–û—Ç—á—ë—Ç –æ –ø–æ–≥–æ–¥–µ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ:{END}')
        print(f' - –û–ø–∏—Å–∞–Ω–∏–µ: {data[0]}')
        print(f' - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data[1]}')
        print(f' - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {data[2]}')
        print(f' - –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {data[3]}')
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return []  # Tr·∫£ v·ªÅ danh s√°ch r·ªóng n·∫øu kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ API
    
    return data

def speak(text, engine):
    engine.say(text)
    engine.runAndWait()

def record_volume():
    r = sr.Recognizer()
    with sr.Microphone(device_index=1) as source:
        print('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...')
        r.adjust_for_ambient_noise(source, duration=0.5)
        print('–°–ª—É—à–∞—é...')
        audio = r.listen(source)
    print('–†–µ—á—å –ø–æ–ª—É—á–µ–Ω–∞.')
    try:
        query = r.recognize_google(audio, language='ru-RU')
        text = query.lower()
        print(f'–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}')
        return text
    except sr.UnknownValueError:
        print('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É —Ä–µ—á—å.')
        speak('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É —Ä–µ—á—å.', engine)
        return None
    except sr.RequestError:
        print('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.')
        speak('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.', engine)

def command_recognition(command, data):
    if not data:  # Ki·ªÉm tra n·∫øu data tr·ªëng
        print('–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.')
        speak('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.', engine)
        return False

    commands = {
        '–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É': 0,
        '–ø–æ–≥–æ–¥–∞': 0,
        '–æ–ø–∏—Å–∞–Ω–∏–µ': 0,
        '–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞': 0,
        '–ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É': 1,
        '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': 1,
        '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞': 2,
        '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': 2,
        '—Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞': 3,
        '—Å–∫–æ—Ä–æ—Å—Ç—å': 3,
    }
    commands_exit = {
        '–ø–æ–∫–∞',
        '—É–≤–∏–¥–∏–º—Å—è',
        '—Å—Ç–æ–ø',
        '–≤—ã—Ö–æ–¥',
        '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
        '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è',
    }
    commands_write = {
        '–∑–∞–ø–∏—Å–∞—Ç—å',
        '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª',
        '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–≥–æ–¥—É',
        '–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å',
        '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å',
    }

    for exit_command in commands_exit:
        if exit_command in command:
            print('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–≤–∏–¥–∏–º—Å—è –ø–æ–∑–∂–µ.')
            speak('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–≤–∏–¥–∏–º—Å—è –ø–æ–∑–∂–µ.', engine)
            return True
        
    for write_command in commands_write:
        if write_command in command:
            with open("weather_log.txt", "a", encoding="utf-8") as f:
                f.write("–û—Ç—á—ë—Ç –æ –ø–æ–≥–æ–¥–µ:\n")
                f.write(f" - –û–ø–∏—Å–∞–Ω–∏–µ: {data[0]}\n")
                f.write(f" - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data[1]}\n")
                f.write(f" - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {data[2]}\n")
                f.write(f" - –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {data[3]}\n\n")
            print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª.")
            speak("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª.", engine)
            return False
        
    temp_value = int(data[1].replace("¬∞C", ""))
    wind_speed_value = int(data[3].replace("km/h", ""))

    if temp_value < 5 or wind_speed_value > 15:
        warning = "–í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–≥–æ–¥–∞ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è. –õ—É—á—à–µ –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞."
        print(warning)
        speak("–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ —Ç–∞–∫–∏—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.", engine)

    if command in commands:
        speak(data[commands[command]], engine)
    else:
        print('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.')
        speak('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.', engine)

if __name__ == '__main__':
    # L·∫•y voice
    engine = pyttsx3.init()
    voices = engine.getProperty('voices')
    for voice in voices:
        if "Microsoft Irina Desktop - Russian" in voice.name:
            engine.setProperty('voice', voice.id)
            break

    weather_data = Weather_Report()

    while True:
        command = record_volume()
        if command is None:
            continue
        should_exit = command_recognition(command, weather_data)
        if should_exit:
            break
